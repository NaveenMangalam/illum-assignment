{"version":3,"sources":["ng://@ngx-toolkit/device/lib/device.model.ts","ng://@ngx-toolkit/device/lib/device.token.ts","ng://@ngx-toolkit/device/lib/device.service.ts","ng://@ngx-toolkit/device/lib/device.module.ts"],"names":["TABLET","MOBILE","NORMAL","ANDROID","IOS","UNKNOWN","Device","type","platform","DeviceType","DevicePlatform","this","prototype","isNormal","isMobile","isTablet","USER_AGENT","InjectionToken","DEVICE","DeviceService","resolveDevice","userAgent","toLowerCase","includes","KNOWN_MOBILE_USER_AGENT_KEYWORDS","some","mobileUserAgent","KNOWN_TABLET_USER_AGENT_KEYWORDS","tabletUserAgent","length","KNOWN_MOBILE_USER_AGENT_PREFIXES","indexOf","substring","deviceResolverFactory","window","navigator","DeviceModule","forRoot","ngModule","providers","provide","useFactory","deps","Optional","NgModule"],"mappings":"4UACEA,OAAA,EACAC,OAAA,EACAC,OAAA,yEAIAC,QAAA,EACAC,IAAA,EACAC,QAAA,gEAGF,IAAAC,EAAA,WAIE,SAAAA,EAAYC,EAAsCC,QAAtC,IAAAD,IAAAA,EAAmBE,EAAWP,aAAQ,IAAAM,IAAAA,EAA2BE,EAAeL,SAC1FM,KAAKJ,KAAOA,EACZI,KAAKH,SAAWA,EAcpB,OAXEF,EAAAM,UAAAC,SAAA,WACE,OAAOF,KAAKJ,OAASE,EAAWP,QAGlCI,EAAAM,UAAAE,SAAA,WACE,OAAOH,KAAKJ,OAASE,EAAWR,QAGlCK,EAAAM,UAAAG,SAAA,WACE,OAAOJ,KAAKJ,OAASE,EAAWT,QAEpCM,EApBA,GCTaU,EAAa,IAAIC,EAAAA,eAAuB,cACxCC,EAAS,IAAID,EAAAA,eAAuB,UCCjDE,EAAA,WAAA,SAAAA,KAsLA,OA9DSA,EAAAC,cAAP,SAAqBC,GACnB,IAAKA,EACH,OAAO,IAAIf,EAAOG,EAAWP,OAAQQ,EAAeL,SAUtD,IAPAgB,EAAYA,EAAUC,eAORC,SAAS,QACrB,OAAO,IAAIjB,EAAOG,EAAWT,OAAQU,EAAeN,SAGhDU,EACJO,EAAUE,SAAS,WACnBJ,EAAcK,iCAAiCC,KAAI,SAACC,GAAmB,OAAAL,EAAUE,SAASG,KAC5F,IAAKZ,EAAU,CAEb,GAAIO,EAAUE,SAAS,WACrB,OAAO,IAAIjB,EAAOG,EAAWT,OAAQU,EAAeP,SAGtD,GAAIkB,EAAUE,SAAS,QACrB,OAAO,IAAIjB,EAAOG,EAAWT,OAAQU,EAAeL,SAIxD,OAAIc,EAAcQ,iCAAiCF,KAAI,SAACG,GAAmB,OAAAP,EAAUE,SAASK,KACrF,IAAItB,EAAOG,EAAWT,OAAQU,EAAeL,SAQpDgB,EAAUQ,QAAU,IACmE,IAAvFV,EAAcW,iCAAiCC,QAAQV,EAAUW,UAAU,EAAG,IAEvE,IAAI1B,EAAOG,EAAWR,OAAQS,EAAeL,SAGlDgB,EAAUE,SAAS,WACd,IAAIjB,EAAOG,EAAWR,OAAQS,EAAeP,SAGlDkB,EAAUE,SAAS,WAAaF,EAAUE,SAAS,SAAWF,EAAUE,SAAS,QAC5E,IAAIjB,EAAOG,EAAWR,OAAQS,EAAeN,KAI7C,IAAIE,EADTQ,EACgBL,EAAWR,OAMbQ,EAAWP,OANUQ,EAAeL,UA7KzCc,EAAAW,iCAA6C,CAC1D,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QAGaX,EAAAK,iCAA6C,CAC1D,aACA,QACA,OACA,SACA,OACA,QACA,MACA,SACA,WACA,SACA,cACA,UACA,UACA,aACA,aACA,OACA,MACA,QACA,aACA,UACA,aACA,UACA,MACA,cAGaL,EAAAQ,iCAA6C,CAAC,OAAQ,WAAY,YAAa,UAgEhGR,EAtLA,GCAA,SAAgBc,EAAsBZ,GAKpC,OAJKA,GAAaa,SAChBb,EAAYa,OAAOC,UAAUd,WAGxBF,EAAcC,cAAcC,GAGrC,IAAAe,EAAA,WAAA,SAAAA,KAiBA,OAZSA,EAAAC,QAAP,WACE,MAAO,CACLC,SAAUF,EACVG,UAAW,CACT,CACEC,QAAStB,EACTuB,WAAYR,EACZS,KAAM,CAAC,CAAC,IAAIC,EAAAA,SAAY3B,4BAZjC4B,EAAAA,WAiBDR,EAjBA","sourcesContent":["export enum DeviceType {\n  TABLET = 0,\n  MOBILE,\n  NORMAL\n}\n\nexport enum DevicePlatform {\n  ANDROID = 0,\n  IOS,\n  UNKNOWN\n}\n\nexport class Device {\n  type: DeviceType;\n  platform: DevicePlatform;\n\n  constructor(type: DeviceType = DeviceType.NORMAL, platform: DevicePlatform = DevicePlatform.UNKNOWN) {\n    this.type = type;\n    this.platform = platform;\n  }\n\n  isNormal(): boolean {\n    return this.type === DeviceType.NORMAL;\n  }\n\n  isMobile(): boolean {\n    return this.type === DeviceType.MOBILE;\n  }\n\n  isTablet(): boolean {\n    return this.type === DeviceType.TABLET;\n  }\n}\n","import {InjectionToken} from '@angular/core';\nimport {Device} from './device.model';\n\nexport const USER_AGENT = new InjectionToken<string>('USER_AGENT');\nexport const DEVICE = new InjectionToken<Device>('DEVICE');\n","import {Device, DevicePlatform, DeviceType} from './device.model';\n\n/**\n * see https://github.com/spring-projects/spring-mobile\n */\nexport class DeviceService {\n  private static KNOWN_MOBILE_USER_AGENT_PREFIXES: string[] = [\n    'w3c ',\n    'w3c-',\n    'acs-',\n    'alav',\n    'alca',\n    'amoi',\n    'avan',\n    'benq',\n    'bird',\n    'blac',\n    'blaz',\n    'brew',\n    'cell',\n    'cldc',\n    'cmd-',\n    'dang',\n    'doco',\n    'eric',\n    'hipt',\n    'htc_',\n    'inno',\n    'ipaq',\n    'ipod',\n    'jigs',\n    'kddi',\n    'keji',\n    'leno',\n    'lg-c',\n    'lg-d',\n    'lg-g',\n    'lge-',\n    'lg/u',\n    'maui',\n    'maxo',\n    'midp',\n    'mits',\n    'mmef',\n    'mobi',\n    'mot-',\n    'moto',\n    'mwbp',\n    'nec-',\n    'newt',\n    'noki',\n    'palm',\n    'pana',\n    'pant',\n    'phil',\n    'play',\n    'port',\n    'prox',\n    'qwap',\n    'sage',\n    'sams',\n    'sany',\n    'sch-',\n    'sec-',\n    'send',\n    'seri',\n    'sgh-',\n    'shar',\n    'sie-',\n    'siem',\n    'smal',\n    'smar',\n    'sony',\n    'sph-',\n    'symb',\n    't-mo',\n    'teli',\n    'tim-',\n    'tosh',\n    'tsm-',\n    'upg1',\n    'upsi',\n    'vk-v',\n    'voda',\n    'wap-',\n    'wapa',\n    'wapi',\n    'wapp',\n    'wapr',\n    'webc',\n    'winw',\n    'winw',\n    'xda ',\n    'xda-'\n  ];\n\n  private static KNOWN_MOBILE_USER_AGENT_KEYWORDS: string[] = [\n    'blackberry',\n    'webos',\n    'ipod',\n    'lge vx',\n    'midp',\n    'maemo',\n    'mmp',\n    'mobile',\n    'netfront',\n    'hiptop',\n    'nintendo DS',\n    'novarra',\n    'openweb',\n    'opera mobi',\n    'opera mini',\n    'palm',\n    'psp',\n    'phone',\n    'smartphone',\n    'symbian',\n    'up.browser',\n    'up.link',\n    'wap',\n    'windows ce'\n  ];\n\n  private static KNOWN_TABLET_USER_AGENT_KEYWORDS: string[] = ['ipad', 'playbook', 'hp-tablet', 'kindle'];\n\n  static resolveDevice(userAgent: string): Device {\n    if (!userAgent) {\n      return new Device(DeviceType.NORMAL, DevicePlatform.UNKNOWN);\n    }\n\n    userAgent = userAgent.toLowerCase();\n\n    /**\n     * Tablet Detection\n     */\n\n    // Apple\n    if (userAgent.includes('ipad')) {\n      return new Device(DeviceType.TABLET, DevicePlatform.IOS);\n    }\n\n    const isMobile: boolean =\n      userAgent.includes('mobile') ||\n      DeviceService.KNOWN_MOBILE_USER_AGENT_KEYWORDS.some(mobileUserAgent => userAgent.includes(mobileUserAgent));\n    if (!isMobile) {\n      // Android\n      if (userAgent.includes('android')) {\n        return new Device(DeviceType.TABLET, DevicePlatform.ANDROID);\n      }\n      // Kindle Fire\n      if (userAgent.includes('silk')) {\n        return new Device(DeviceType.TABLET, DevicePlatform.UNKNOWN);\n      }\n    }\n    // From keywords\n    if (DeviceService.KNOWN_TABLET_USER_AGENT_KEYWORDS.some(tabletUserAgent => userAgent.includes(tabletUserAgent))) {\n      return new Device(DeviceType.TABLET, DevicePlatform.UNKNOWN);\n    }\n\n    /**\n     * Mobile detection\n     */\n    // From prefix\n    if (\n      userAgent.length >= 4 &&\n      DeviceService.KNOWN_MOBILE_USER_AGENT_PREFIXES.indexOf(userAgent.substring(0, 4)) !== -1\n    ) {\n      return new Device(DeviceType.MOBILE, DevicePlatform.UNKNOWN);\n    }\n    // Android\n    if (userAgent.includes('android')) {\n      return new Device(DeviceType.MOBILE, DevicePlatform.ANDROID);\n    }\n    // Apple\n    if (userAgent.includes('iphone') || userAgent.includes('ipod') || userAgent.includes('ipad')) {\n      return new Device(DeviceType.MOBILE, DevicePlatform.IOS);\n    }\n    // From keywords\n    if (isMobile) {\n      return new Device(DeviceType.MOBILE, DevicePlatform.UNKNOWN);\n    }\n\n    /**\n     * => Normal device\n     */\n    return new Device(DeviceType.NORMAL, DevicePlatform.UNKNOWN);\n  }\n}\n","import {ModuleWithProviders, NgModule, Optional} from '@angular/core';\nimport {Device} from './device.model';\nimport {DeviceService} from './device.service';\nimport {DEVICE, USER_AGENT} from './device.token';\n\nexport function deviceResolverFactory(userAgent?: string): Device {\n  if (!userAgent && window) {\n    userAgent = window.navigator.userAgent;\n  }\n\n  return DeviceService.resolveDevice(userAgent);\n}\n\n@NgModule()\nexport class DeviceModule {\n  /**\n   * In root module to provide the DEVICE\n   */\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DeviceModule,\n      providers: [\n        {\n          provide: DEVICE,\n          useFactory: deviceResolverFactory,\n          deps: [[new Optional(), USER_AGENT]]\n        }\n      ]\n    };\n  }\n}\n"]}