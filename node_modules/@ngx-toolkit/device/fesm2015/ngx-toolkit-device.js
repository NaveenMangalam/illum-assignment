import { InjectionToken, Optional, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const DeviceType = {
    TABLET: 0,
    MOBILE: 1,
    NORMAL: 2,
};
DeviceType[DeviceType.TABLET] = 'TABLET';
DeviceType[DeviceType.MOBILE] = 'MOBILE';
DeviceType[DeviceType.NORMAL] = 'NORMAL';
/** @enum {number} */
const DevicePlatform = {
    ANDROID: 0,
    IOS: 1,
    UNKNOWN: 2,
};
DevicePlatform[DevicePlatform.ANDROID] = 'ANDROID';
DevicePlatform[DevicePlatform.IOS] = 'IOS';
DevicePlatform[DevicePlatform.UNKNOWN] = 'UNKNOWN';
class Device {
    /**
     * @param {?=} type
     * @param {?=} platform
     */
    constructor(type = DeviceType.NORMAL, platform = DevicePlatform.UNKNOWN) {
        this.type = type;
        this.platform = platform;
    }
    /**
     * @return {?}
     */
    isNormal() {
        return this.type === DeviceType.NORMAL;
    }
    /**
     * @return {?}
     */
    isMobile() {
        return this.type === DeviceType.MOBILE;
    }
    /**
     * @return {?}
     */
    isTablet() {
        return this.type === DeviceType.TABLET;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const USER_AGENT = new InjectionToken('USER_AGENT');
/** @type {?} */
const DEVICE = new InjectionToken('DEVICE');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * see https://github.com/spring-projects/spring-mobile
 */
class DeviceService {
    /**
     * @param {?} userAgent
     * @return {?}
     */
    static resolveDevice(userAgent) {
        if (!userAgent) {
            return new Device(DeviceType.NORMAL, DevicePlatform.UNKNOWN);
        }
        userAgent = userAgent.toLowerCase();
        /**
         * Tablet Detection
         */
        // Apple
        if (userAgent.includes('ipad')) {
            return new Device(DeviceType.TABLET, DevicePlatform.IOS);
        }
        /** @type {?} */
        const isMobile = userAgent.includes('mobile') ||
            DeviceService.KNOWN_MOBILE_USER_AGENT_KEYWORDS.some((/**
             * @param {?} mobileUserAgent
             * @return {?}
             */
            mobileUserAgent => userAgent.includes(mobileUserAgent)));
        if (!isMobile) {
            // Android
            if (userAgent.includes('android')) {
                return new Device(DeviceType.TABLET, DevicePlatform.ANDROID);
            }
            // Kindle Fire
            if (userAgent.includes('silk')) {
                return new Device(DeviceType.TABLET, DevicePlatform.UNKNOWN);
            }
        }
        // From keywords
        if (DeviceService.KNOWN_TABLET_USER_AGENT_KEYWORDS.some((/**
         * @param {?} tabletUserAgent
         * @return {?}
         */
        tabletUserAgent => userAgent.includes(tabletUserAgent)))) {
            return new Device(DeviceType.TABLET, DevicePlatform.UNKNOWN);
        }
        /**
         * Mobile detection
         */
        // From prefix
        if (userAgent.length >= 4 &&
            DeviceService.KNOWN_MOBILE_USER_AGENT_PREFIXES.indexOf(userAgent.substring(0, 4)) !== -1) {
            return new Device(DeviceType.MOBILE, DevicePlatform.UNKNOWN);
        }
        // Android
        if (userAgent.includes('android')) {
            return new Device(DeviceType.MOBILE, DevicePlatform.ANDROID);
        }
        // Apple
        if (userAgent.includes('iphone') || userAgent.includes('ipod') || userAgent.includes('ipad')) {
            return new Device(DeviceType.MOBILE, DevicePlatform.IOS);
        }
        // From keywords
        if (isMobile) {
            return new Device(DeviceType.MOBILE, DevicePlatform.UNKNOWN);
        }
        /**
         * => Normal device
         */
        return new Device(DeviceType.NORMAL, DevicePlatform.UNKNOWN);
    }
}
DeviceService.KNOWN_MOBILE_USER_AGENT_PREFIXES = [
    'w3c ',
    'w3c-',
    'acs-',
    'alav',
    'alca',
    'amoi',
    'avan',
    'benq',
    'bird',
    'blac',
    'blaz',
    'brew',
    'cell',
    'cldc',
    'cmd-',
    'dang',
    'doco',
    'eric',
    'hipt',
    'htc_',
    'inno',
    'ipaq',
    'ipod',
    'jigs',
    'kddi',
    'keji',
    'leno',
    'lg-c',
    'lg-d',
    'lg-g',
    'lge-',
    'lg/u',
    'maui',
    'maxo',
    'midp',
    'mits',
    'mmef',
    'mobi',
    'mot-',
    'moto',
    'mwbp',
    'nec-',
    'newt',
    'noki',
    'palm',
    'pana',
    'pant',
    'phil',
    'play',
    'port',
    'prox',
    'qwap',
    'sage',
    'sams',
    'sany',
    'sch-',
    'sec-',
    'send',
    'seri',
    'sgh-',
    'shar',
    'sie-',
    'siem',
    'smal',
    'smar',
    'sony',
    'sph-',
    'symb',
    't-mo',
    'teli',
    'tim-',
    'tosh',
    'tsm-',
    'upg1',
    'upsi',
    'vk-v',
    'voda',
    'wap-',
    'wapa',
    'wapi',
    'wapp',
    'wapr',
    'webc',
    'winw',
    'winw',
    'xda ',
    'xda-'
];
DeviceService.KNOWN_MOBILE_USER_AGENT_KEYWORDS = [
    'blackberry',
    'webos',
    'ipod',
    'lge vx',
    'midp',
    'maemo',
    'mmp',
    'mobile',
    'netfront',
    'hiptop',
    'nintendo DS',
    'novarra',
    'openweb',
    'opera mobi',
    'opera mini',
    'palm',
    'psp',
    'phone',
    'smartphone',
    'symbian',
    'up.browser',
    'up.link',
    'wap',
    'windows ce'
];
DeviceService.KNOWN_TABLET_USER_AGENT_KEYWORDS = ['ipad', 'playbook', 'hp-tablet', 'kindle'];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?=} userAgent
 * @return {?}
 */
function deviceResolverFactory(userAgent) {
    if (!userAgent && window) {
        userAgent = window.navigator.userAgent;
    }
    return DeviceService.resolveDevice(userAgent);
}
class DeviceModule {
    /**
     * In root module to provide the DEVICE
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: DeviceModule,
            providers: [
                {
                    provide: DEVICE,
                    useFactory: deviceResolverFactory,
                    deps: [[new Optional(), USER_AGENT]]
                }
            ]
        };
    }
}
DeviceModule.decorators = [
    { type: NgModule }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { DEVICE, Device, DeviceModule, DevicePlatform, DeviceType, USER_AGENT, deviceResolverFactory as Éµa };
//# sourceMappingURL=ngx-toolkit-device.js.map
